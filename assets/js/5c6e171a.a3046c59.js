"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[510],{1813:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>r,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var o=t(4848),i=t(8453);const s={slug:"/theming/how-to-use",sidebar_label:"How to use it?",title:"How to use it?",id:"theming-how-to-use",keywords:["theme","theming","useTheme","hooks","themeProvider"]},r=void 0,a={id:"Guides/Theming/theming-how-to-use",title:"How to use it?",description:"The boilerplate provides a pre-configured theme ready for use.",source:"@site/docs/04-Guides/04-Theming/01-Using.md",sourceDirName:"04-Guides/04-Theming",slug:"/theming/how-to-use",permalink:"/react-native-boilerplate/docs/theming/how-to-use",draft:!1,unlisted:!1,editUrl:"https://github.com/thecodingmachine/react-native-boilerplate/edit/main/website-documentation/docs/docs/04-Guides/04-Theming/01-Using.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/theming/how-to-use",sidebar_label:"How to use it?",title:"How to use it?",id:"theming-how-to-use",keywords:["theme","theming","useTheme","hooks","themeProvider"]},sidebar:"tutorialSidebar",previous:{title:"I18n",permalink:"/react-native-boilerplate/docs/internationalization"},next:{title:"Configuration",permalink:"/react-native-boilerplate/docs/theming/configuration"}},h={},c=[{value:"<code>useTheme</code> hook",id:"usetheme-hook",level:2},{value:"Change theme",id:"change-theme",level:2},{value:"Theme Provider",id:"theme-provider",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["The boilerplate provides a pre-configured theme ready for use.\nTo make use of it, simply follow this section's instructions.\nIf you'd like to gain a deeper understanding of the theme configuration, please refer to\nthe ",(0,o.jsx)(n.a,{href:"/docs/theming/configuration",children:"configuration"})," section for more details."]}),"\n",(0,o.jsxs)(n.h2,{id:"usetheme-hook",children:[(0,o.jsx)(n.code,{children:"useTheme"})," hook"]}),"\n",(0,o.jsxs)(n.p,{children:["If you need to access the style classes, you can use the ",(0,o.jsx)(n.code,{children:"useTheme"})," hook in the following manner:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useTheme } from '@/theme';\n\nconst Example = () => {\n    const {\n      //highlight-start\n      colors,\n      variant,\n      layout,\n      gutters,\n      fonts,\n      backgrounds,\n      borders,\n      navigationTheme,\n      components,\n      //highlight-end\n    } = useTheme();\n    \n    return (\n        <View\n            style={[\n                //highlight-start\n                layout.itemsCenter,\n                layout.justifyCenter,\n                //highlight-end\n            ]}\n        >\n            <Brand />\n            {isError && (\n                <Text style={[\n                    //highlight-start\n                    gutters.marginTop_30, \n                    fonts.font_16, \n                    fonts.text_red_500\n                    //highlight-end\n                ]}>\n                    An error occured\n                </Text>\n            )}\n        </View>\n    )\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"change-theme",children:"Change theme"}),"\n",(0,o.jsxs)(n.p,{children:["As mentioned in the ",(0,o.jsx)(n.a,{href:"/docs/theming/configuration",children:"configuration"})," section, you have the flexibility to add new themes\n(variants) and switch between them directly within the app. For example, if you have a ",(0,o.jsx)(n.code,{children:"default"})," theme configured with a\n",(0,o.jsx)(n.code,{children:"dark"})," variant, you can switch the current theme to ",(0,o.jsx)(n.code,{children:"dark"})," at any point."]}),"\n",(0,o.jsxs)(n.p,{children:["To achieve this, you can employ the ",(0,o.jsx)(n.code,{children:"useTheme"})," hook as follows:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useTheme } from '@/theme';\n\nconst Example = () => {\n    const { changeTheme } = useTheme();\n    \n    return (\n        <Button\n            title=\"Change theme\"\n            onPress={() => changeTheme('dark')}\n        />\n    )\n}\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["If you require assistance in defining a new theme variant, kindly consult the ",(0,o.jsx)(n.a,{href:"/docs/theming/configuration#variants",children:"configuration"})," section for guidance."]})}),"\n",(0,o.jsx)(n.h2,{id:"theme-provider",children:"Theme Provider"}),"\n",(0,o.jsxs)(n.p,{children:["The magic of ",(0,o.jsx)(n.code,{children:"useTheme"})," is made possible by our ThemeProvider component.\nThis main component handles the generation of all the styles in your application.\nAs we've emphasized, a clean separation of concerns is paramount to us."]}),"\n",(0,o.jsxs)(n.p,{children:["That's why we've designed a single, transparent component, using the adapted ",(0,o.jsx)(n.a,{href:"https://react.dev/learn/passing-data-deeply-with-context",children:"context pattern"}),"\nthat takes care of generating all your styles, storing the theme variant,\nand even offers you the flexibility to switch the theme for your entire app.\nNo black box magic here \u2013 you have full visibility into the code and the\nfreedom to enhance it as needed to meet your unique requirements."]})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(6540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);